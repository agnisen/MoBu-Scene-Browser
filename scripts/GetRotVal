#!/usr/bin/env python
"""
MotionBuilder script to check rotation X, Y, Z values of specific components
across all takes in the current scene and export to CSV files.

Components checked:
- XX_Transport_Example:crank
- XX_Transport_Example:pedal_l  
- XX_Transport_Example:pedal_r

The script creates CSV files with the take names and rotation values for each component.
"""

from pyfbsdk import *
import csv
import os
from datetime import datetime

def get_component_rotations():
    """
    Check rotation values of Crank, Pedal_l, and Pedal_r components
    across all takes in the current scene and save to CSV file.
    """
    
    # Define the component names to check (with namespace)
    component_names = ['XX_Transport_Example:crank', 'XX_Transport_Example:pedal_l', 'XX_Transport_Example:pedal_r']
    
    # Get the current scene
    scene = FBSystem().Scene
    
    # Get all takes in the scene
    takes = scene.Takes
    
    if len(takes) == 0:
        print("No takes found in the current scene.")
        return
    
    # Create timestamp for unique filename
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # Get scene filename for CSV naming
    scene_filename = scene.FileName if scene.FileName else "untitled_scene"
    scene_name = os.path.splitext(os.path.basename(scene_filename))[0]
    
    # Create CSV filename
    csv_filename = f"{scene_name}_component_rotations_{timestamp}.csv"
    csv_filepath = os.path.join(os.path.expanduser("~"), "Desktop", csv_filename)
    
    # Prepare CSV data
    csv_data = []
    
    # CSV Headers
    headers = ['Take_Name']
    for comp_name in component_names:
        display_name = comp_name.split(':')[-1] if ':' in comp_name else comp_name
        headers.extend([f'{display_name}_X', f'{display_name}_Y', f'{display_name}_Z'])
    
    csv_data.append(headers)
    
    print("=" * 60)
    print("EXTRACTING COMPONENT ROTATION VALUES TO CSV")
    print("=" * 60)
    
    # Iterate through all takes
    for take in takes:
        print(f"Processing Take: {take.Name}")
        
        # Set the current take
        scene.CurrentTake = take
        
        # Start building row data
        row_data = [take.Name]
        
        # Check each component
        for comp_name in component_names:
            # Find the component in the scene
            component = FBFindObjectByName(comp_name)
            
            if component is None or not isinstance(component, FBModel):
                # Add empty values if component not found
                row_data.extend(['N/A', 'N/A', 'N/A'])
                continue
            
            # Get rotation values
            rotation = component.Rotation
            rot_x = round(rotation[0], 3)
            rot_y = round(rotation[1], 3)
            rot_z = round(rotation[2], 3)
            
            row_data.extend([rot_x, rot_y, rot_z])
        
        csv_data.append(row_data)
    
    # Write to CSV file
    try:
        with open(csv_filepath, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerows(csv_data)
        
        print(f"\nCSV file successfully created:")
        print(f"Location: {csv_filepath}")
        print(f"Rows: {len(csv_data)} (including header)")
        
    except Exception as e:
        print(f"Error writing CSV file: {str(e)}")
        # Fallback: try writing to MotionBuilder install directory
        try:
            fallback_path = os.path.join(os.path.dirname(__file__), csv_filename)
            with open(fallback_path, 'w', newline='') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerows(csv_data)
            print(f"CSV file created at fallback location: {fallback_path}")
        except:
            print("Could not write CSV file to any location.")
    
    print("\n" + "=" * 60)
    print("ROTATION EXTRACTION COMPLETE")
    print("=" * 60)

def get_component_first_last_frame_values():
    """
    Shows rotation values on the first and last frame of each take
    and saves to CSV file.
    """
    
    component_names = ['XX_Transport_Example:crank', 'XX_Transport_Example:pedal_l', 'XX_Transport_Example:pedal_r']
    scene = FBSystem().Scene
    takes = scene.Takes
    
    if len(takes) == 0:
        print("No takes found in the current scene.")
        return
    
    # Create timestamp for unique filename
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # Get scene filename for CSV naming
    scene_filename = scene.FileName if scene.FileName else "untitled_scene"
    scene_name = os.path.splitext(os.path.basename(scene_filename))[0]
    
    # Create CSV filename
    csv_filename = f"{scene_name}_first_last_frame_values_{timestamp}.csv"
    csv_filepath = os.path.join(os.path.expanduser("~"), "Desktop", csv_filename)
    
    # Prepare CSV data
    csv_data = []
    
    # CSV Headers
    headers = ['Take_Name', 'Start_Frame', 'End_Frame']
    for comp_name in component_names:
        display_name = comp_name.split(':')[-1] if ':' in comp_name else comp_name
        headers.extend([
            f'{display_name}_First_X', f'{display_name}_First_Y', f'{display_name}_First_Z',
            f'{display_name}_Last_X', f'{display_name}_Last_Y', f'{display_name}_Last_Z'
        ])
    
    csv_data.append(headers)
    
    print("\n" + "=" * 60)
    print("EXTRACTING FIRST AND LAST FRAME VALUES TO CSV")
    print("=" * 60)
    
    # Get the player for time control
    player = FBPlayerControl()
    
    for take in takes:
        print(f"Processing Take: {take.Name}")
        
        # Set the current take
        scene.CurrentTake = take
        
        # Get the take's time span
        take_start = take.LocalTimeSpan.GetStart()
        take_stop = take.LocalTimeSpan.GetStop()
        
        # Start building row data
        row_data = [take.Name, take_start.GetFrame(), take_stop.GetFrame()]
        
        # Check each component
        for comp_name in component_names:
            component = FBFindObjectByName(comp_name)
            
            if component is None or not isinstance(component, FBModel):
                # Add empty values if component not found
                row_data.extend(['N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A'])
                continue
            
            # Go to first frame and get rotation values
            player.Goto(take_start)
            scene.Evaluate()  # Force scene evaluation at this time
            
            first_rotation = component.Rotation
            first_x = round(first_rotation[0], 3)
            first_y = round(first_rotation[1], 3)
            first_z = round(first_rotation[2], 3)
            
            # Go to last frame and get rotation values  
            player.Goto(take_stop)
            scene.Evaluate()  # Force scene evaluation at this time
            
            last_rotation = component.Rotation
            last_x = round(last_rotation[0], 3)
            last_y = round(last_rotation[1], 3)
            last_z = round(last_rotation[2], 3)
            
            row_data.extend([first_x, first_y, first_z, last_x, last_y, last_z])
        
        csv_data.append(row_data)
    
    # Write to CSV file
    try:
        with open(csv_filepath, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerows(csv_data)
        
        print(f"\nCSV file successfully created:")
        print(f"Location: {csv_filepath}")
        print(f"Rows: {len(csv_data)} (including header)")
        
    except Exception as e:
        print(f"Error writing CSV file: {str(e)}")
        # Fallback: try writing to MotionBuilder install directory
        try:
            fallback_path = os.path.join(os.path.dirname(__file__), csv_filename)
            with open(fallback_path, 'w', newline='') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerows(csv_data)
            print(f"CSV file created at fallback location: {fallback_path}")
        except:
            print("Could not write CSV file to any location.")

# Main execution
if __name__ == "__main__":
    try:
        # Run the main function
        get_component_rotations()
        
        # Uncomment the line below if you also want to see first/last frame values
        # get_component_first_last_frame_values()
        
    except Exception as e:
        print(f"Error occurred: {str(e)}")
        print("Make sure you're running this script in MotionBuilder with a valid scene loaded.")
